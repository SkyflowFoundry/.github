name: "GoSec Scan"

# Run workflow each time code is pushed to your repository and on a schedule.
on:
  workflow_call:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v4

    - name: Extract Go version from go.mod
      id: go_version
      run: |
        # Check if a go.mod file exists directly in the root of the repository
        if [ -f "go.mod" ]; then
          GO_MOD_PATH="go.mod"
        else
          # If not, search for go.mod file anywhere in the repository
          GO_MOD_PATH=$(find . -name 'go.mod' | head -n 1)
        fi

        if [ -z "$GO_MOD_PATH" ]; then
          echo "Error: go.mod file not found in the repository."
          exit 1
        fi

        # Extract the Go version in the format "go 1.23.1" or "go 1.23"
        VERSION=$(grep -oP '^go \K[0-9]+\.[0-9]+\.[0-9]+' "$GO_MOD_PATH" || grep -oP '^go \K[0-9]+\.[0-9]+' "$GO_MOD_PATH")

        if [ -z "$VERSION" ]; then
          echo "Error: Go version not found in go.mod file"
          exit 1
        fi

        echo "GO_VERSION=$VERSION" >> $GITHUB_ENV
        echo "Go version extracted: $VERSION"
    
    - name: Set up Go with the extracted version
      uses: actions/setup-go@v3
      with:
        go-version: ${{ env.GO_VERSION }}  # Using the version extracted from go.mod

    - name: Security Scan
      uses: securego/gosec@master
      with:
        args: '-severity=high -confidence=high -no-fail -fmt json -out results.json ./...'

    - name: Displaying raw GoSec run data
      run: |
        echo "Displaying raw GoSec run dataâ€¦"
        cat results.json

    - name: Final GoSec Json Output Results
      run: |
        # Let's display the 'Issues' array to understand its structure
        echo "Final GoSec Json Output Results..."
        jq '.Issues' results.json
